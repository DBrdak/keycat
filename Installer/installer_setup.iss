; Script generated by the Inno Setup Script Wizard.

[Setup]
AppName=KeyCat
AppVersion=1.0.0
DefaultDirName={pf}\KeyCat
DefaultGroupName=KeyCat
OutputBaseFilename=KeyCatSetup
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
; Copy and rename CLI executable
Source: "D:\Programownie\Projekty\KeyCat\KeyCat.CLI\bin\Release\net8.0\win-x64\publish\KeyCat.CLI.exe"; DestDir: "{app}\CLI"; DestName: "kcat.exe"; Flags: ignoreversion
; Copy remaining CLI files
Source: "D:\Programownie\Projekty\KeyCat\KeyCat.CLI\bin\Release\net8.0\win-x64\publish\*"; Excludes: "KeyCat.CLI.exe"; DestDir: "{app}\CLI"; Flags: ignoreversion recursesubdirs createallsubdirs

; Copy Key Listener files
Source: "D:\Programownie\Projekty\KeyCat\KeyCat.Listener\bin\Release\net8.0-windows\win-x64\publish\*"; DestDir: "{app}\Listener"; Flags: ignoreversion recursesubdirs createallsubdirs

[Registry]
; Add CLI to system PATH
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}\CLI"; Flags: preservestringtype

[Icons]
; Create shortcut for KeyCat Listener in Startup folder
Name: "{userstartup}\KeyCat Listener"; Filename: "{app}\Listener\KeyCat.Listener.exe"; WorkingDir: "{app}\Listener"

[Run]
; Optionally, start KeyCat Listener immediately after installation
Filename: "{app}\Listener\KeyCat.Listener.exe"; Description: "Start KeyCat Listener now"; Flags: nowait postinstall skipifsilent

[Code]
const
  HWND_BROADCAST1 = HWND($FFFF);
  WM_SETTINGCHANGE = $001A;
  SMTO_ABORTIFHUNG = $0002;

function SendMessageTimeout(hWnd: HWND; Msg: UINT; wParam: WPARAM; lParam: LPARAM;
  fuFlags: UINT; uTimeout: UINT; var lpdwResult: DWORD): LRESULT;
  external 'SendMessageTimeoutW@user32.dll stdcall';

procedure RefreshEnvironment;
var
  dwResult: DWORD;
begin
  SendMessageTimeout(HWND_BROADCAST1, WM_SETTINGCHANGE, 0, LPARAM(PChar('Environment')),
    SMTO_ABORTIFHUNG, 5000, dwResult);
end;

function InitializeSetup(): Boolean;
begin
  Result := True;
  if not IsAdminLoggedOn() then
  begin
    MsgBox('This installer requires administrator privileges. Please run as administrator.', mbError, MB_OK);
    Result := False;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
  begin
    RefreshEnvironment;
  end;
end;
